(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{152:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return i})),n.d(t,"default",(function(){return p}));var a=n(2),r=n(9),o=(n(0),n(155)),s={id:"Transfers",title:"Transfers",sidebar_label:"Transfers"},c={id:"Transfers",isDocsHomePage:!1,title:"Transfers",description:"Submit a Batch",source:"@site/docs/Transfers.md",permalink:"/docs/Transfers",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/Transfers.md",sidebar_label:"Transfers",sidebar:"someSidebar",previous:{title:"Deposits",permalink:"/docs/Deposits"},next:{title:"Withdraws",permalink:"/docs/Withdraws"}},i=[{value:"Submit a Batch",id:"submit-a-batch",children:[{value:"Step-1: Collecting transactions from users",id:"step-1-collecting-transactions-from-users",children:[]}]},{value:"Step-2: Validate transactions",id:"step-2-validate-transactions",children:[]},{value:"Step-3",id:"step-3",children:[]}],l={rightToc:i};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"submit-a-batch"},"Submit a Batch"),Object(o.b)("h3",{id:"step-1-collecting-transactions-from-users"},"Step-1: Collecting transactions from users"),Object(o.b)("p",null,"The coordinator collects signed transactions from users via REST API's and adds them to the mempool"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),'type (\n    // TxReceiver represents the tx received from user\n    TxReceiver struct {\n        To        uint64 `json:"to"`\n        From      uint64 `json:"from"`\n        Amount    uint64 `json:"amount"`\n        Nonce     uint64 `json:"nonce"`\n        TokenID   uint64 `json:"token"`\n        Signature string `json:"sig"`\n    }\n)\n')),Object(o.b)("h2",{id:"step-2-validate-transactions"},"Step-2: Validate transactions"),Object(o.b)("p",null,"Validate the transaction by ",Object(o.b)("inlineCode",{parentName:"p"},"calling")," the ",Object(o.b)("inlineCode",{parentName:"p"},"stateless")," ",Object(o.b)("inlineCode",{parentName:"p"},"transactionEvaluation")," function present on-chain."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"        /**\n       * @notice processTx processes a transactions and returns the\n         * updated balance and the updated leaves\n     * @return Total number of batches submitted onchain\n     */\n    function processTx(\n        bytes32 _balanceRoot,\n        bytes32 _accountsRoot,\n        Types.Transaction memory _tx,\n        Types.PDAMerkleProof memory _pda_proof,\n        Types.AccountMerkleProof memory _from_merkle_proof,\n        Types.AccountMerkleProof memory _to_merkle_proof\n    ) public returns (bytes32, uint256, uint256, bool) {\n    }\n")),Object(o.b)("p",null,"All the application logic on how the transaction should be evaluated in present in the ",Object(o.b)("inlineCode",{parentName:"p"},"processTx")," function. The transactions are evaluated against the balance root provided."),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"processTx")," after running the transaction returns the the following tuple ",Object(o.b)("inlineCode",{parentName:"p"},"(bytes32, uint256, uint256, bool)")," which consists of ",Object(o.b)("inlineCode",{parentName:"p"},"updatedBalanceRoot"),", ",Object(o.b)("inlineCode",{parentName:"p"},"fromAccountBalancePostTransaction"),", ",Object(o.b)("inlineCode",{parentName:"p"},"toAccountBalancePostTransaction")," and if the transaction was ",Object(o.b)("inlineCode",{parentName:"p"},"valid")," or not."),Object(o.b)("h2",{id:"step-3"},"Step-3"),Object(o.b)("p",null,"Post running all transactions via the on-chain function we now have the latest ",Object(o.b)("inlineCode",{parentName:"p"},"balanceTreeRoot")," and all the transactions that were used to create this ",Object(o.b)("inlineCode",{parentName:"p"},"root")," which we will now use to update the contract with the new batch!"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"     /**\n     * @notice Submits a new batch to batches\n     * @param _txs Compressed transactions .\n     * @param _updatedRoot New balance tree root after processing all the transactions\n     */\n    function submitBatch(bytes[] calldata _txs, bytes32 _updatedRoot)\n        external\n        payable\n        onlyCoordinator\n        isNotRollingBack\n    {}\n")),Object(o.b)("p",null,"The transactions are encoded via ",Object(o.b)("inlineCode",{parentName:"p"},"abi.encode")," method for now, but will be switched to a lot better compressed encoding in the next version."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"The data stored per batch is as follows")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"struct Batch {\n        // updated state root post transaction\n        bytes32 stateRoot;\n\n        // current account tree root (consists on all pubkeys)\n        bytes32 accountRoot;\n\n        // contains the address of the committer\n        address committer;\n\n        // merkle root for all transactions submitted(computed on-chain)\n        bytes32 txRoot;\n\n        // stores the stake committed with this batch\n        uint256 stakeCommitted;\n\n        /*\n        Every batch sent by a coordinator has a finalisation period\n        */\n        uint256 finalisesOn;\n\n        // timestamp for the commitment\n        uint256 timestamp;\n    }\n")))}p.isMDXComponent=!0},155:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),p=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=p(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),u=p(n),d=a,m=u["".concat(s,".").concat(d)]||u[d]||b[d]||o;return n?r.a.createElement(m,c(c({ref:t},l),{},{components:n})):r.a.createElement(m,c({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=d;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:a,s[1]=c;for(var l=2;l<o;l++)s[l]=n[l];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);